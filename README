------------
Introduction
------------
spreadsheet_server was built to aid rapid web tool development where the logic
was already implemented in Microsoft Excel/LibreOffice Calc. Instead of
rewriting the logic from scratch, this tool was born.

The tool has been developed to work on a headless GNU/Linux system where the
server and client are on the same machine.

--------
Features
--------
* 'Instant' access to cells in the spreadsheets because they open in
LibreOffice Calc.
* All the function calculation support and power of LibreOffice Calc.
* Server requests are threaded so concurrent connections to different
spreadsheets are supported.
* A given spreadsheet is locked (within python, not on disk) when it is accessed
to prevent state irregularities across multiple concurrent connections to the
same spreadsheet.
* By default, when a spreadsheet file changes on disk, it will be closed and
  opened in LibreOffice.
* Spreadsheets can be saved - useful for debugging purposes.

-----
Usage
-----
Place your spreadsheets in './spreadsheets'.

Make sure you have a correctly set up virtualenv and required packages installed
(see below), then run the server:
python server.py

You can also create a SpreadsheetServer object (from server.py) and then call
the method 'run' on the object to start the server. This allows for
customisation of the default settings. Have a look in server.py to see what can
be set.

Have a look at the example_client.py for an overview of how to use the functions
exposed by client.py.

------------
How it works
------------
A LibreOffice instance is launched by 'server.py' in a headless state.
By default, the './spreadsheets' directory is polled every 60 seconds for file
changes.
New spreadsheets in the directory are opened with LibreOffice and removed
spreadsheets are closed in LibreOffice.
The 'client.py' connects to the server and can update cells and retrieve
their calculated content.

------------
Requirements
------------
Server:
	LibreOffice Calc
	python3
	virtualenv created with '--system-site-packages' argument
	For example: "virtualenv --system-site-packages -p python3 venv"

	Python packages installed to the virtualenv:
	pyoo (for the connection to LibreOffice)
	psutil (for cross platform pid discovery for the soffice process)
	werkzeug (for securing filenames when saving spreadsheets)

	You can install the required packages with pip and the requirements.txt file:
	pip install -r requirements.txt

Client:
	python2 or python3.

-----
Tests
-----
The tests are currently being written.
You can run the all the current tests with 'python -m unittest discover'.
Use './coverage.sh' to run the coverage analysis of the current tests and have a look in the generated htmlcov directory.